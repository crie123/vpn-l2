import json
import asyncio
import socket
import os
from protocol import *
from crypto_stack import encrypt_message, decrypt_message
from tun import RealInterfaceStub  # –∏–ª–∏ FakeTun
from concurrent.futures import ThreadPoolExecutor

CONFIG_FILE = "config.json"

DEFAULT_CONFIG = {
    "server_ip": "127.0.0.1",
    "server_http_port": 8000,
    "server_udp_ports": [9000, 9001],
    "protocol": "custom",
    "ethertype": 2054,
    "buffer_size": 2048,
    "outbound_target": "8.8.8.8",
    "outbound_port": 53
}

def load_or_create_config():
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "w") as f:
            json.dump(DEFAULT_CONFIG, f, indent=2)
        print("[*] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: config.json")
    with open(CONFIG_FILE) as f:
        return json.load(f)

async def send_loop(sock, config, server_url, tun):
    print(f"[DEBUG] send_loop tun id = {id(tun)}")
    print("[SEND_LOOP] –ó–∞–ø—É—â–µ–Ω")
    while True:
        data = tun.consume()
        if not data:
            print("[SEND_LOOP] –ñ–¥—É –¥–∞–Ω–Ω—ã—Ö...")
            await asyncio.sleep(10)
            continue

        print(f"[üìù] –î–∞–Ω–Ω—ã–µ –æ—Ç tun.consume(): {data}")

        encrypted = await encrypt_message(data.decode('utf-8', errors='ignore'), server_url)
        print(f"[üîê] –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted[:20].hex()}... –¥–ª–∏–Ω–∞: {len(encrypted)}")

        frame = build_frame(FRAME_TYPE_DATA, encrypted)
        print(f"[üì¶] –ü–æ—Å—Ç—Ä–æ–µ–Ω —Ñ—Ä–µ–π–º: {frame[:20].hex()}... –¥–ª–∏–Ω–∞: {len(frame)}")

        for port in config['server_udp_ports']:
            target = (config['server_ip'], port)
            sock.sendto(frame, target)
            print(f"[üöÄ] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {target}")

async def recv_loop(sock, tun, server_url):
    loop = asyncio.get_running_loop()
    while True:
        try:
            data, addr = await loop.sock_recvfrom(sock, 4096)
            print(f"[üì•] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {addr}, –¥–ª–∏–Ω–∞: {len(data)} –±–∞–π—Ç")

            frame_type, payload = parse_frame(data)
            print(f"[üìñ] –§—Ä–µ–π–º: —Ç–∏–ø {frame_type}, –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ {len(payload)} –±–∞–π—Ç")

            if frame_type == FRAME_TYPE_DATA:
                decrypted = await decrypt_message(payload, server_url)
                print(f"[üîì] –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {decrypted}")
                tun.inject(decrypted.encode('utf-8'))

        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")

def blocking_input():
    return input(">>> ").strip()

async def input_loop(tun):
    loop = asyncio.get_running_loop()
    executor = ThreadPoolExecutor(1)

    while True:
        msg = await loop.run_in_executor(executor, blocking_input)
        if msg:
            print(f"[‚å®Ô∏è] –í–≤–æ–¥: {msg}")
            tun.write(msg.encode('utf-8'))
            
async def main():
    config = load_or_create_config()
    server_url = f"http://{config['server_ip']}:{config['server_http_port']}"
    tun = RealInterfaceStub()  # ‚Üê –æ–¥–∏–Ω –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
    print(f"[DEBUG] tun id = {id(tun)}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('', 0))
    sock.setblocking(False)

    print(f"[üåê] –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –°–µ—Ä–≤–µ—Ä: {server_url}, UDP: {config['server_udp_ports']}")
    await asyncio.gather(
        send_loop(sock, config, server_url, tun),   # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ tun
        recv_loop(sock, tun, server_url),
        input_loop(tun)
    )

if __name__ == "__main__":
    asyncio.run(main())
